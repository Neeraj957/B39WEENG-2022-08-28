GUVI: Zen Class — Part 1: Find the culprits and nail them — debugging javascript

Once you are familiar with basic syntax you can reinforce your understanding by solving these simple snippets

Find the culprit

fix.html

<!DOCTYPE html>
<html>
<body>
 <script>
 alert( “I’m JavaScript!’);
 </script>
 Whats the error in this ?
</body>
</html>

   <!-- answer -->
   <!-- double quotes incomplete inside the alert, correct code mentioned below -->

fix.html

<!DOCTYPE html>
<html>
<body>
 <script>
 alert( "I’m JavaScript!");
 </script>
 Whats the error in this ?
</body>
</html>


— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Find the culprit and invoke the alert

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

scripts.js

alert(“I’m invoked!”);


   <!-- answer -->
   <!-- javascript file name inside the source is incorrect and it should be scripts.js and not script.js src-->

fix.html

<!DOCTYPE html>
<html>
<body>
    <script src="/test/scripts.js"></script>     <!-- correct code -->
</body>
</html>

scripts.js

alert(“I’m invoked!”);


— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Explain the below how it works

explain.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

alert("I'm JavaScript!");
alert('Hello') // this line is not having semicolon
alert(`Wor
 ld`)
alert(3 +
1
+ 2); // this is multiple line code and its working

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Fix the below to alert Guvi geek

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let admin=9, fname=10.5; 
fname = "Guvi";
lname = "geek"
admin = fname+lname;alert( admin ); // "Guvi geek"

   <!-- answer -->
   <!-- space is missing within the alert string, to get the space we can enter the spaxe in either of the value i.e. fname
	or lname or we can use template literal to put the space in between -->

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let admin=9, fname=10.5; 
fname = "Guvi";
lname = "geek"
admin = (`${fname} ${lname}`);
alert( admin ); // "Guvi geek"


— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Fix the below to alert hello Guvi geek

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let fname=10.5; 
fname = "Guvi";
lname = "geek"let name = fname+lname;alert( 'hello ${name}' );


   <!-- answer -->
   <!-- space is missing within the alert string, to get the space we can enter the spaxe in either of the value
	and the template literal form is incorrect the string "hello needs to be inside the template literal before the addressing of variable with the $ sign-->

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let fname=10.5; 
fname = "Guvi";
lname = " geek";
let name = fname+lname;alert( `hello ${name}` );


— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Fix the below to alert sum of two numbers

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let a = prompt("First number?");
let b = prompt("Second number?");
alert(a + b);


   <!-- answer -->
   <!-- parsing of the variables required before parsing-->

script.js

let a = prompt("First number?");
let b = prompt("Second number?");
alert(parseInt(a) + parseInt(b));

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Fix the below to alert sum of two numbers

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let a = prompt("First number?");
let b = prompt("Second number?");
alert(a + b);


   <!-- answer -->
   <!-- parsing of the variables required before parsing-->

script.js

let a = prompt("First number?");
let b = prompt("Second number?");
alert(parseInt(a) + parseInt(b));

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

If you run the below scritpt you will get “Code is Blasted”

Explain Why the Code is blasted and how to diffuse it and get “Diffused”.

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

var a = "2" > "12";//Don't touch below this
if (a) {
  console.log("Code is Blasted")
}
else
{
  console.log("Diffused") 
}

   <!-- answer -->
   <!-- current statement inside var a is a true statement as the comparison is within string and alphabetically 2<1
	so changing the sign in between will cause the statement to go false and therefore triggering else cycle -->

script.js


var a = "2" < "12";
if (a) {
  console.log ("Code is Blasted")
}
else
{
  console.log ("Diffused")
}

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

How to get the success in console.

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let a = prompt("Enter a number?");//Don't modify any code below thisif (a) {
 console.log( 'OMG it works for any number inc 0' );
}
else
{
 console.log( "Success" );
}

   <!-- answer -->
   <!-- any number assigned in the variable a will confirm as true in the if statement and so changing it as not equal (=!) will trigger the false part of else statement  -->

script.js

let a =! prompt("Enter a number?");//Don't modify any code below this
if (a) {
 console.log( 'OMG it works for any number inc 0' );
}
else
{
 console.log( "Success" );
}

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

How to get the correct score in console.

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let value = prompt('How many runs you scored in this ball');
if (value === 4) {
      console.log("You hit a Four");
} else if (value === 6) {
      console.log("You hit a Six");
} else {
      console.log("I couldn't figure out");
}

   <!-- answer -->
   <!-- the above code carries strict comparison of value however prompt accepts strings value,
and thus strict comparison will not be true, removing strict comparison corrects the code-->

script.js

let value = prompt('How many runs you scored in this ball');
if (value == 4) {
      console.log("You hit a Four");
} else if (value == 6) {
      console.log("You hit a Six");
} else {
      console.log(`You hit ${value}`);
}

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Fix the code to welcome the Employee

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let login = 'Employee';
let message = (login == 'Employee') ? :
  (login == 'Director') ? 'Greetings' :
  (login == '') ? 'No login' :
  '';console.log(message);

   <!-- answer -->
   <!-- expression expected after the ternary operator -->

script.js

let login = 'Employee';

let message = (login == 'Employee') ? 'welcome':
  (login == 'Director') ? 'Greetings' :
  (login == '') ? 'No login' :'';
  console.log(message);


— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Fix the code to welcome the boss

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

// You cant change the value of the msg

let message;

if (null || 2 || undefined )
{
 let message = "welcome boss";
}
else
{
 let message = "Go away";
}
  console.log(message);

   <!-- answer -->
   <!-- variable message already declared, shouldn't not be declared again inside the block scope-->

script.js

let message;

if (null || 2 || undefined )
{
  message = "welcome boss";
}
else
{
  message = "Go away";
}
  console.log(message);

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Fix the code to welcome the boss

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let message;
let lock = 2;//Dont change any code below this
if (null || lock || undefined )
{
  message = "Go away";
}
else
{
 message = "welcome";
}
  console.log(message);


   <!-- answer -->
   <!-- declaring lock as null will serve as falsey value and therefore triggering else use case -->

script.js

let message;
let lock = null;
if (null || lock || undefined )
{
  message = "Go away";
}
else
{
 message = "welcome";
}
  console.log(message);

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Fix the code to welcome the boss

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let message;
let lock = 2;//Dont change any code below this

if (lock && " " || undefined )
{
  message = "Go away";
}
else
{
 message = "welcome";
}
console.log(message);

   <!-- answer -->
   <!-- declaring lock as null will serve as falsey value and therefore triggering else use case -->

script.js

let message;
let lock = null;
if (lock && " " || undefined )
{
  message = "Go away";
}
else
{
 message = "welcome";
}
  console.log(message);

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Change the code to print

3

2

1

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

//You can change only 2 characters
let i = 3;while (i) {
  console.log( --i );
}

   <!-- answer with correct code -->

script.js


let i = 3;while (i) {
    console.log( i );
    i=i-1;
  }

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Change the code to print 1 to 10 in 4 lines

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let num = 1
console.log(num)
num += 1
console.log(num)
num += 1
console.log(num)
num += 1
console.log(num)
num += 1
console.log(num)
num += 1
console.log(num)
num += 1
console.log(num)
num += 1
console.log(num)
num += 1
console.log(num)
num += 1
console.log(num)

   <!-- answer with correct code -->

script.js

for (let num= 1; num<=10; num++){
console.log(num)
}

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Change the code to print even numbers

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

//You are allowed to modify only one character 
for (let num = 2; num <= 20; num += 1) {
  console.log(num)
}

   <!-- answer with correct code -->


for (let num = 2; num <= 20; num += 2) {
    console.log(num)
  }

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Change the code to print all the gifts

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let gifts = ["teddy bear", "drone", "doll"];
for (let i = 0; i < 3; i++) {
  console.log('Wrapped ${'gifts[i]'} and added a bow!');
}

   <!-- answer with correct code -->

let gifts = ["teddy bear", "drone", "doll"];
for (let i = 0; i < 3; i++) {
  console.log(`Wrapped ${gifts[i]} and added a bow!`);
}

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Fix the code to disarm the bomb.

fix.html

<!DOCTYPE html>
<html>
<body>
 <script src=”script.js”></script>
</body>
</html>

script.js

let countdown = 100;
while (countdown > 0) {
  countdown--;

  if(countdown == 0)
  {
   console.log("bomb triggered");
  }
}

   <!-- answer with correct code -->

let countdown = 100;
while (countdown > 1) {
  countdown--;

  if(countdown == 0)
  {
   console.log("bomb triggered");
  }
  else
  {
   console.log("bomb disarmed")
  }
}

— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — -

Whats the msg printed and why?

var lemein = “0”;
var lemeout = 0;
var msg = “”;

if (lemein) {
 msg += “hi”;
 }if (lemeout) {
 msg += ‘Hello’;
}console.log(msg);

   <!-- answer -->

msg printed would be hi as number 0 is a falsey value.

Whats the msg printed and why? Guess you answer before running it.

var lemein = “0”;
var lemeout = 0;
var msg = “”;
if (lemein) {
 msg += “hi”;
 }
if (lemeout) {
 msg += ‘Hello’;
}

   <!-- answer -->

msg printed would be hi as number 0 is a falsey value.


console.log(msg);